services:
  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: rabbitmq_container
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}]
    volumes:
      - ./rabbitmqdata:/var/lib/rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics check_port_connectivity"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend

  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - backend

  minio:
    container_name: minio
    image: minio/minio:latest
    volumes:
      - ./miniodata:/data
    ports:
      - 9000:9000
      - 9001:9001
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    entrypoint: sh
    command: -c "mc mb /data/${MINIO_BUCKET} && /usr/bin/minio server /data --console-address ':9001'"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend

  app:
    build:
      context: app
      dockerfile: Dockerfile
    command: bash -c "alembic upgrade head && fastapi run app/main.py"
    env_file:
      - .env
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - 8000:8000
    networks:
      - frontend
      - backend

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    command: pnpm run dev
    restart: on-failure
    ports:
      - 3000:3000
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
