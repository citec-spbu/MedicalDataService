"""ini

Revision ID: f94c7bf3ed19
Revises: 0f9a47a960af
Create Date: 2024-12-21 22:11:30.527771

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'f94c7bf3ed19'
down_revision: Union[str, None] = '0f9a47a960af'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_update_study = PGFunction(
        schema="public",
        signature="update_study()",
        definition='RETURNS TRIGGER AS $$\nBEGIN\n\tUPDATE studies\n    SET\n\tseries_count = (\n\t\tSELECT count(*) FROM series\n\t\tWHERE studies.id = series.study_id), \n\tinstances_count = (\n\t\tSELECT COALESCE(sum(series.instances_count), 0) FROM series\n\t\tWHERE studies.id = series.study_id),\n\tmodalities = (\n\t\tSELECT ARRAY(\n            SELECT DISTINCT series.modality FROM series\n\t\t    WHERE studies.id = series.study_id AND series.modality IS NOT NULL)\n\t\t)\n    WHERE id = NEW.study_id;\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql'
    )
    op.create_entity(public_update_study)

    public_update_series = PGFunction(
        schema="public",
        signature="update_series()",
        definition='RETURNS TRIGGER AS $$\nBEGIN\n\tUPDATE series\n    SET\n\tinstances_count = (\n\t\tSELECT COUNT(*) FROM instances\n\t\tWHERE series.id = instances.series_id)\n    WHERE id = NEW.series_id;\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql'
    )
    op.create_entity(public_update_series)

    public_series_trigger_update_study = PGTrigger(
        schema="public",
        signature="trigger_update_study",
        on_entity="public.series",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE OR DELETE ON series\nFOR EACH ROW\nEXECUTE FUNCTION update_study()'
    )
    op.create_entity(public_series_trigger_update_study)

    public_instances_trigger_update_series = PGTrigger(
        schema="public",
        signature="trigger_update_series",
        on_entity="public.instances",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE OR DELETE ON instances\nFOR EACH ROW\nEXECUTE FUNCTION update_series()'
    )
    op.create_entity(public_instances_trigger_update_series)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_instances_trigger_update_series = PGTrigger(
        schema="public",
        signature="trigger_update_series",
        on_entity="public.instances",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE OR DELETE ON instances\nFOR EACH ROW\nEXECUTE FUNCTION update_series()'
    )
    op.drop_entity(public_instances_trigger_update_series)

    public_series_trigger_update_study = PGTrigger(
        schema="public",
        signature="trigger_update_study",
        on_entity="public.series",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE OR DELETE ON series\nFOR EACH ROW\nEXECUTE FUNCTION update_study()'
    )
    op.drop_entity(public_series_trigger_update_study)

    public_update_series = PGFunction(
        schema="public",
        signature="update_series()",
        definition='RETURNS TRIGGER AS $$\nBEGIN\n\tUPDATE series\n    SET\n\tinstances_count = (\n\t\tSELECT COUNT(*) FROM instances\n\t\tWHERE series.id = instances.series_id)\n    WHERE id = NEW.series_id;\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql'
    )
    op.drop_entity(public_update_series)

    public_update_study = PGFunction(
        schema="public",
        signature="update_study()",
        definition='RETURNS TRIGGER AS $$\nBEGIN\n\tUPDATE studies\n    SET\n\tseries_count = (\n\t\tSELECT count(*) FROM series\n\t\tWHERE studies.id = series.study_id), \n\tinstances_count = (\n\t\tSELECT COALESCE(sum(series.instances_count), 0) FROM series\n\t\tWHERE studies.id = series.study_id),\n\tmodalities = (\n\t\tSELECT ARRAY(\n            SELECT DISTINCT series.modality FROM series\n\t\t    WHERE studies.id = series.study_id AND series.modality IS NOT NULL)\n\t\t)\n    WHERE id = NEW.study_id;\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql'
    )
    op.drop_entity(public_update_study)

    # ### end Alembic commands ###
